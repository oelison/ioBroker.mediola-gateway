{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios from \"axios\";\nimport * as dgram from \"dgram\";\nconst inSocket = dgram.createSocket(\"udp4\");\nconst outSocket = dgram.createSocket(\"udp4\");\nlet waitingForAnyDevice = false;\nlet waitingForMacDevice = false;\nlet waitingForIpDevice = false;\nlet foundMacAddress = \"\";\nlet foundIpAddress = \"\";\nlet validMediolaFound = false;\nlet sysvarInit = false;\nlet pullDataTimer: ioBroker.Timeout | undefined | null = null;\n\ntype MediolaEvt = { type: string; data: string };\nfunction isMediolaEvt(o: any): o is MediolaEvt {\n    return \"type\" in o && \"data\" in o;\n}\ntype MediolaSysVarArray = [\n    {\n        type: string;\n        adr: string;\n        state: string;\n        id: number;\n        active: boolean;\n    },\n];\ntype HmState = { lowbat: boolean; state: string };\nfunction isMediolaSysVarArray(o: any): o is MediolaSysVarArray {\n    return true;\n}\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass MediolaGateway extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"mediola-gateway\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n    /**\n     * check for forbidden chars\n     */\n    private validName(Name: string): boolean {\n        const CheckName = Name.replace(this.FORBIDDEN_CHARS, \"_\");\n        if (CheckName == Name) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * create URL\n     */\n    private genURL(): string {\n        let retVal = \"\";\n        let commandType = \"command\";\n        if (this.config.mediolaV5orHigher === true) {\n            commandType = \"cmd\";\n        }\n        if (this.config.username === \"\") {\n            if (this.config.auth === \"\") {\n                retVal = \"http://\" + foundIpAddress + \"/\" + commandType + \"?\";\n            } else {\n                retVal = \"http://\" + foundIpAddress + \"/\" + commandType + \"?auth=\" + this.config.auth + \"&\";\n            }\n        } else {\n            retVal =\n                \"http://\" +\n                foundIpAddress +\n                \"/\" +\n                commandType +\n                \"?XC_USER=\" +\n                this.config.username +\n                \"&XC_PASS=\" +\n                this.config.password +\n                \"&\";\n        }\n        return retVal;\n    }\n    /** evaluate if the response data is successfull\n     * it looks like that cmd returns a json and command a text\n     * actual documentation of the API do not explain this\n     * workaround to test both every time\n     */\n    private testResponse(response: axios.AxiosResponse): boolean {\n        let successfull = false;\n        try {\n            if (response.data.toString().startsWith(\"{XC_SUC}\")) {\n                successfull = true;\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                this.log.debug(error.message);\n            }\n            this.log.debug(\"response.data.toString failed\");\n        }\n        try {\n            if (JSON.stringify(response.data).startsWith('{\"XC_SUC\"')) {\n                successfull = true;\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                this.log.debug(error.message);\n            }\n            this.log.debug(\"JSON.stringify(response.data) failed\");\n        }\n        if (successfull === false) {\n            try {\n                this.log.error(\"JSON response cmd: \" + JSON.stringify(response.data));\n            } catch (error) {\n                if (error instanceof Error) {\n                    this.log.debug(error.message);\n                }\n                this.log.debug(\"log error print failed json\");\n            }\n            try {\n                this.log.error(\"text response command: \" + response.data.toString());\n            } catch (error) {\n                if (error instanceof Error) {\n                    this.log.debug(error.message);\n                }\n                this.log.debug(\"log error print failed to string\");\n            }\n        }\n        return successfull;\n    }\n    /**\n     * Is called when valid mediola found\n     * read all existing SysVars\n     */\n    private async readAllSystemVars(timerRead: boolean): Promise<void> {\n        this.log.debug(\n            \"validMediola: \" +\n                validMediolaFound +\n                \" sysvarInti: \" +\n                sysvarInit +\n                \" timerRead: \" +\n                timerRead +\n                \" cmd \" +\n                this.config.mediolaV5orHigher +\n                \" pull \" +\n                this.config.pullData,\n        );\n        if ((validMediolaFound && !sysvarInit) || timerRead) {\n            sysvarInit = true;\n            let reqUrl = this.genURL() + \"XC_FNC=getstates\";\n            reqUrl = encodeURI(reqUrl);\n            this.log.debug(reqUrl);\n            axios\n                .get(reqUrl)\n                .then((res) => {\n                    this.log.debug(JSON.stringify(res.data));\n                    let jsonData = null;\n                    let validJsonData = false;\n                    if (res.data.toString().startsWith(\"{XC_SUC}\")) {\n                        jsonData = JSON.parse(res.data.substring(8));\n                        validJsonData = true;\n                    } else if (JSON.stringify(res.data).startsWith('{\"XC_SUC\":[')) {\n                        jsonData = res.data.XC_SUC;\n                        validJsonData = true;\n                    } else {\n                        jsonData = [];\n                    }\n                    if (validJsonData) {\n                        //this.log.debug(\"mediola device found data: \" + res.data);\n                        try {\n                            this.log.debug(\"mediola device found data: \" + JSON.stringify(jsonData));\n                            if (isMediolaSysVarArray(jsonData)) {\n                                if (jsonData.length > 0) {\n                                    for (let index = 0; index < jsonData.length; index++) {\n                                        const element = jsonData[index];\n                                        this.log.debug(JSON.stringify(element));\n                                        // element.adr is from 01 to ff, no invalid chars possible according specification\n                                        // discard element, when not following the naming standart (just for sure)\n                                        if (element.type === \"TASK\") {\n                                            const taskId = element.id;\n                                            const taskActive = element.active;\n                                            const objName = \"TASK\" + taskId;\n                                            this.setObjectNotExists(\"state.\" + objName, {\n                                                type: \"state\",\n                                                common: {\n                                                    name: \"TASK \" + taskId,\n                                                    type: \"boolean\",\n                                                    role: \"text\",\n                                                    read: true,\n                                                    write: false,\n                                                },\n                                                native: {},\n                                            });\n                                            this.setState(\"state.\" + objName, { val: taskActive, ack: true });\n                                        } else if (this.validName(element.adr)) {\n                                            let objState = \"\";\n                                            if (element.type === \"WR\") {\n                                                const objName = element.type + element.adr;\n                                                if (element.adr.length != 8) {\n                                                    this.log.error(\"this WR element has not 8 chars: \" + element.adr);\n                                                }\n                                                this.setObjectNotExists(\"state.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"WIR \" + element.adr,\n                                                        type: \"number\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: false,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setObjectNotExists(\"action.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"WIR \" + element.adr + \" 1=up, 2=down, 3=stop\",\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: true,\n                                                    },\n                                                    native: {},\n                                                });\n                                                if (element.state.length === 6) {\n                                                    const hexVal = element.state.substring(2, 4);\n                                                    const dezVal = parseInt(hexVal, 16);\n                                                    this.setState(\"state.\" + objName, { val: dezVal, ack: true });\n                                                } else {\n                                                    this.log.error(\n                                                        \"state length not 6 element.state: \" + element.state,\n                                                    );\n                                                    this.setState(\"state.\" + objName, { val: 0, ack: true });\n                                                }\n                                            } else if (element.type === \"BK\") {\n                                                const objName = element.type + element.adr;\n                                                if (element.adr.length != 6) {\n                                                    this.log.error(\"this BK element has not 6 chars: \" + element.adr);\n                                                }\n                                                this.setObjectNotExists(\"state.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"BK \" + element.adr,\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: false,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setObjectNotExists(\"action.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"BK \" + element.adr + \" 1=up, 2=down, 3=stop\",\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: true,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setState(\"state.\" + objName, { val: element.state, ack: true });\n                                            } else if (element.type === \"RT\") {\n                                                const objName = element.type + element.adr;\n                                                if (element.adr.length != 6) {\n                                                    this.log.error(\"this RT element has not 6 chars: \" + element.adr);\n                                                }\n                                                this.setObjectNotExists(\"state.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"RT \" + element.adr,\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: false,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setObjectNotExists(\"action.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"RT \" + element.adr + \" 1=up, 2=down, 3=stop\",\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: true,\n                                                    },\n                                                    native: {},\n                                                });\n                                            } else if (element.type === \"ER\") {\n                                                const objName = element.type + element.adr;\n                                                if (element.adr.length != 2) {\n                                                    this.log.error(\"this ER element has not 2 chars: \" + element.adr);\n                                                }\n                                                this.setObjectNotExists(\"state.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"ER \" + element.adr,\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: false,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setObjectNotExists(\"action.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"ER \" + element.adr + \" 1=up, 2=down, 3=stop\",\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: true,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setState(\"state.\" + objName, { val: element.state, ack: true });\n                                            } else if (element.type === \"DY2\") {\n                                                const objName = element.type + element.adr;\n                                                if (element.adr.length != 8) {\n                                                    this.log.error(\"this DY2 element has not 8 chars: \" + element.adr);\n                                                }\n                                                this.setObjectNotExists(\"state.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: \"2DY \" + element.adr,\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: false,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setObjectNotExists(\"action.\" + objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name:\n                                                            \"2DY \" + element.adr + \" 1=up, 2=down, 3=stop 10,20,...,90\",\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: true,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setState(\"state.\" + objName, { val: element.state, ack: true });\n                                            } else if (element.type === \"HM\") {\n                                                if (JSON.stringify(element.state) != \"{}\") {\n                                                    const objName = \"homematic.\" + element.adr;\n                                                    const hmState: HmState = JSON.parse(JSON.stringify(element.state));\n                                                    if (\"state\" in hmState) {\n                                                        this.log.debug(JSON.stringify(hmState.state));\n                                                        this.setObjectNotExists(objName, {\n                                                            type: \"state\",\n                                                            common: {\n                                                                name: \"HM device with state\",\n                                                                type: \"string\",\n                                                                role: \"text\",\n                                                                read: true,\n                                                                write: true,\n                                                            },\n                                                            native: {},\n                                                        });\n                                                        this.setState(objName, { val: hmState.state, ack: true });\n                                                    }\n                                                }\n                                            } else {\n                                                const objName = \"sysvars.id\" + element.adr;\n                                                const description = \"sysvar\" + element.adr;\n                                                objState = element.state;\n                                                this.setObjectNotExists(objName, {\n                                                    type: \"state\",\n                                                    common: {\n                                                        name: description,\n                                                        type: \"string\",\n                                                        role: \"text\",\n                                                        read: true,\n                                                        write: false,\n                                                    },\n                                                    native: {},\n                                                });\n                                                this.setState(objName, { val: objState, ack: true });\n                                            }\n                                        } else {\n                                            this.log.error(\n                                                \"invalid sys var name from mediola device element.adr = \" + element.adr,\n                                            );\n                                        }\n                                    }\n                                }\n                            } else {\n                                this.log.error(\"json format not known:\" + JSON.stringify(jsonData));\n                            }\n                        } catch (error) {\n                            if (error instanceof Error) {\n                                this.log.error(error.message);\n                            }\n                            this.log.error(\"json format invalid:\" + JSON.stringify(jsonData));\n                        }\n                    } else {\n                        this.log.error(\"mediola device rejected the request: \" + res.data.toString());\n                    }\n                })\n                .catch((error) => {\n                    sysvarInit = false; // retry next time\n                    if (error instanceof Error) {\n                        this.log.error(error.message);\n                    }\n                    this.log.error(\"mediola device not reached by getting sys vars\");\n                });\n        } else {\n            this.log.debug(\"recalled with no effect\");\n        }\n    }\n    private async refreshStates(source: string): Promise<void> {\n        this.log.debug(\"Source: \" + source);\n        // stop timer\n        if (pullDataTimer != null) {\n            this.log.debug(\"timer cleared by: \" + source);\n            this.clearTimeout(pullDataTimer);\n        }\n        if (this.config.pullData === true) {\n            // suppress on init call\n            if (source !== \"onReady\") {\n                this.readAllSystemVars(true);\n            }\n            // start timer\n            if (validMediolaFound) {\n                let pullInterval = this.config.pullDataInterval;\n                if (pullInterval < 1) {\n                    pullInterval = 1;\n                }\n                pullDataTimer = this.setTimeout(() => {\n                    pullDataTimer = null;\n                    this.refreshStates(\"timeout (default)\");\n                }, pullInterval * 60000);\n            }\n        }\n    }\n    // lern call\n    // http://ipaddress/command?XC_FNC=Learn\n    // set calls\n    // http://ipaddress/command?XC_FNC=setVar&id=01&type=ONOFF&value=off\n    // http://ipaddress/command?XC_FNC=setVar&id=01&type=ONOFF&value=on\n    // http://ipaddress/command?XC_FNC=setVar&id=02&type=int&value=00000007\n    // http://ipaddress/command?XC_FNC=setVar&id=03&type=float&value=31323334\n    // http://ipaddress/command?XC_FNC=setVar&id=04&type=string&value=abcdefghij\n    // events\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"B:01:off\"}\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"B:01:on\"}\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"I:02:00000007\"}\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"F:03:432\"}\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"S:04:abcdefghij\"}\n    // getstates Mediola\n    // http://ipaddress/command?XC_FNC=getstates\n    // {XC_SUC}[\n    //    {\"type\":\"ONOFF\",\"adr\":\"01\",\"state\":\"on\"},\n    //    {\"type\":\"INT\",\"adr\":\"02\",\"state\":\"00000007\"},\n    //    {\"type\":\"FLOAT\",\"adr\":\"03\",\"state\":\"31323334\"},\n    //    {\"type\":\"STRING\",\"adr\":\"04\",\"state\":\"abcdefghij\"}]\n    // getstates Nobily\n    // {XC_SUC}[\n    //    {\"type\":\"BK\",\"sid\":\"01\",\"adr\":\"123456\",\"config\":\"\",\"state\":\"\"}]\n    // getstates WIR\n    // {XC_SUC}[\n    //      {\"type\":\"EVENT\",\"adr\":\"FF\",\"state\":\"0\"},\n    //      {\"type\":\"WR\",\"sid\":\"01\",\"adr\":\"xaaaaaax\",\"config\":\"F000050528:1:7340:6B53\",\"state\":\"013300\",\"deviceType\":\"01\"}]\n    // /info?at=46b385e0a2d610044569ff7a031324a9\n    // {\"XC_SUC\":\n    //  {   \"name\":\"WIR-CONNECT V6\",\n    //      \"mhv\":\"XN II\",\n    //      \"mfv\":\"1.2.10-3896c366\",\n    //      \"msv\":\"1.16.0\",\n    //      \"hwv\":\"C3\",\n    //      \"vid\":\"000A\",\n    //      \"mem\":200000,\n    //      \"ip\":\"xxx.xxx.xxx.xxx\",\n    //      \"sn\":\"xxx.xxx.xxx.xxx\",\n    //      \"gw\":\"xxx.xxx.xxx.xxx\",\n    //      \"dns\":\"xxx.xxx.xxx.xxx\",\n    //      \"mac\":\"40-66-7a-00-86-d4\",\n    //      \"ntp\":\"xxx.xxx.xxx.xxx\",\n    //      \"start\":1680028537,\n    //      \"time\":1689705023,\n    //      \"loc\":\"21020D0087\",\n    //      \"serial\":\"230400,8N1\",\n    //      \"io\":\"AA-E0\",\n    //      \"cfg\":\"BF\",\n    //      \"server\":\"ccs.wir-elektronik-cloud.de:80\",\n    //      \"locked\":false,\n    //      \"sid\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    //      \"wifi\":\"HITCS_mobile\",\n    //      \"rssi\":-60}}\n    // set rollo\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0101 up\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0102 down\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0103 stop\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0107pp pp=percent\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", false, true);\n        this.extendObject(\"action\", {\n            type: \"folder\",\n            common: {\n                name: \"action\",\n            },\n        });\n        this.extendObject(\"sysvars\", {\n            type: \"folder\",\n            common: {\n                name: \"sysvars\",\n            },\n        });\n        // try to find the mediola gateway with the given config\n        this.log.info(\"auto detection: \" + this.config.autoDetect);\n        if (this.config.autoDetect == false) {\n            this.log.info(\"find by mac: \" + this.config.findByMac);\n            if (this.config.findByMac == true) {\n                waitingForMacDevice = true;\n                foundMacAddress = this.config.mac;\n                this.log.info(\"with mac address: \" + foundMacAddress);\n            } else {\n                this.log.info(\"find by ip: \" + this.config.findByIp);\n                if (this.config.findByIp == true) {\n                    waitingForIpDevice = false;\n                    validMediolaFound = true;\n                    foundIpAddress = this.config.ip;\n                    this.readAllSystemVars(false);\n                    this.refreshStates(\"onReady\");\n                    this.setState(\"info.connection\", true, true);\n                    this.log.info(\"with ip: \" + foundIpAddress);\n                } else {\n                    this.log.error(\"no valid detection method defined\");\n                }\n            }\n        } else {\n            waitingForAnyDevice = true;\n        }\n        inSocket.on(\"listening\", () => {\n            const address = inSocket.address();\n            this.log.debug(`UDP socket listening on ${address.address}:${address.port}`);\n        });\n        inSocket.on(\"message\", (message, remote) => {\n            if (message.toString().startsWith(\"{XC_EVT}\")) {\n                const eventData = message.toString().substring(8);\n                try {\n                    const jsonData = JSON.parse(eventData);\n                    if (isMediolaEvt(jsonData)) {\n                        if (jsonData.type === \"IR\") {\n                            this.setState(\"receivedIrData\", { val: jsonData.data, ack: true });\n                        } else if (jsonData.type === \"SV\") {\n                            this.log.debug(JSON.stringify(jsonData));\n                            const data = jsonData.data;\n                            const index = data.substring(2, 4);\n                            const value = data.substring(5);\n                            if (data.startsWith(\"I:\")) {\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else if (data.startsWith(\"B:\")) {\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else if (data.startsWith(\"S:\")) {\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else if (data.startsWith(\"F:\")) {\n                                // never reached yet, because invalid json chars in floats\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else {\n                                this.log.debug(\"sys var type not known: \" + jsonData.data);\n                            }\n                        } else if (jsonData.type === \"WR\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"RT\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"BK\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"NY\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"DY\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"DY2\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"ER\") {\n                            // not yet seen, but should be intresting when received\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else if (jsonData.type === \"HM\") {\n                            // ignor HM data\n                            this.log.debug(JSON.stringify(jsonData));\n                        } else {\n                            this.log.debug(\"data type not known: \" + jsonData.type);\n                            this.log.debug(JSON.stringify(jsonData));\n                        }\n                    } else {\n                        this.log.error(\"json format not known:\" + message);\n                    }\n                } catch (error) {\n                    if (error instanceof Error) {\n                        this.log.error(error.message);\n                    }\n                    this.log.error(\"json format invalid:\" + message);\n                }\n            } else {\n                this.log.debug(`in RECEIVED unknow message: ${remote.address}:${remote.port}-${message}|end`);\n            }\n        });\n        inSocket.bind(1902);\n        outSocket.bind(() => {\n            outSocket.setBroadcast(true);\n            outSocket.on(\"message\", (message, remote) => {\n                let errorName = \"No line with NAME: found.\";\n                this.log.debug(`out RECEIVED: ${remote.address}:${remote.port} - ${message}|end`);\n                const dataLines = String(message).split(\"\\n\");\n                let ipAddress = \"\";\n                let macAddress = \"\";\n                let mediolaFound = false;\n                for (const dataLine of dataLines) {\n                    this.log.debug(dataLine);\n                    if (dataLine.startsWith(\"IP:\")) {\n                        ipAddress = dataLine.substring(3);\n                    }\n                    if (dataLine.startsWith(\"MAC:\")) {\n                        macAddress = dataLine.substring(4);\n                        // possible command to set the DNS of the gateway\n                        // outSocket.send(\n                        //     'SET:' + macAddress + '\\n' +\n                        //     'AUTH:' + password + '\\n' +\n                        //     'DNS:192.168.54.99\\n'\n                        //     , 1901, '255.255.255.255', (err) => {\n                        //         this.log.error(`err send pwd: ${err}`);\n                        // });\n                    }\n                    if (dataLine.startsWith(\"NAME:AIO GATEWAY\")) {\n                        mediolaFound = true;\n                    }\n                    if (dataLine.startsWith(\"NAME:AIO GW\")) {\n                        mediolaFound = true;\n                    }\n                    if (dataLine.startsWith(\"NAME:WIR-CONNECT V6\")) {\n                        mediolaFound = true;\n                    }\n                    if (dataLine.startsWith(\"NAME:\")) {\n                        errorName = \"unknown name line: \" + dataLine;\n                    }\n                }\n                if (mediolaFound) {\n                    if (waitingForAnyDevice === true) {\n                        waitingForAnyDevice = false;\n                        foundMacAddress = macAddress;\n                        foundIpAddress = ipAddress;\n                        this.setState(\"info.connection\", true, true);\n                        this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\n                        validMediolaFound = true;\n                    }\n                    if (waitingForMacDevice === true) {\n                        if (foundMacAddress === macAddress) {\n                            waitingForMacDevice = false;\n                            foundIpAddress = ipAddress;\n                            this.setState(\"info.connection\", true, true);\n                            this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\n                            validMediolaFound = true;\n                        }\n                    }\n                    if (waitingForIpDevice === true) {\n                        if (foundIpAddress === ipAddress) {\n                            waitingForIpDevice = false;\n                            foundMacAddress = macAddress;\n                            this.setState(\"info.connection\", true, true);\n                            this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\n                            validMediolaFound = true;\n                        }\n                    }\n                    if (validMediolaFound === true) {\n                        this.readAllSystemVars(false);\n                        this.refreshStates(\"onReady\");\n                    }\n                } else {\n                    this.log.error(\"unkown device on this port\");\n                    this.log.error(errorName);\n                }\n            });\n        });\n        outSocket.send(\"GET\\n\", 1901, \"255.255.255.255\", (err) => {\n            console.log(\"err send: \" + err);\n        });\n        // setup the connectors\n        await this.setObjectNotExistsAsync(\"receivedIrData\", {\n            type: \"state\",\n            common: {\n                name: \"receivedIrData\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(\"sendIrData\", {\n            type: \"state\",\n            common: {\n                name: \"sendIrData\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(\"sendRfData\", {\n            type: \"state\",\n            common: {\n                name: \"sendRfData\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        this.subscribeStates(\"sendIrData\");\n        this.subscribeStates(\"sendRfData\");\n        this.subscribeStates(\"sysvars.id*\");\n        this.subscribeStates(\"action.WR*\");\n        this.subscribeStates(\"action.BK*\");\n        this.subscribeStates(\"action.NY*\");\n        this.subscribeStates(\"action.DY*\");\n        this.subscribeStates(\"action.2DY*\");\n        this.subscribeStates(\"action.RT*\");\n        this.subscribeStates(\"action.ER*\");\n        this.subscribeStates(\"homematic.*\");\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            inSocket.close();\n            outSocket.close();\n            callback();\n        } catch (error) {\n            if (error instanceof Error) {\n                this.log.debug(error.message);\n            }\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n            // This is ioBroker convention, only send commands if ack = false\n            if (state.ack === false) {\n                const dataNameParts = id.split(\".\");\n                let dataName = \"\";\n                let subfolder = \"\";\n                if (dataNameParts.length === 4) {\n                    subfolder = dataNameParts[2];\n                    dataName = dataNameParts[3];\n                } else if (dataNameParts.length === 3) {\n                    dataName = dataNameParts[2];\n                } else if (dataNameParts.length > 4) {\n                    if (dataNameParts[2] === \"homematic\") {\n                        subfolder = dataNameParts[2];\n                        dataName = dataNameParts[3];\n                        for (let index = 4; index < dataNameParts.length; index++) {\n                            dataName = dataName + \".\" + dataNameParts[index];\n                        }\n                    }\n                } else {\n                    this.log.debug(\"len: \" + dataNameParts.length);\n                    for (let index = 0; index < dataNameParts.length; index++) {\n                        this.log.debug(index.toString() + \" = \" + dataNameParts[index]);\n                    }\n                }\n                if (dataName === \"sendIrData\") {\n                    this.log.debug(\"try send: \" + state.val);\n                    if (validMediolaFound) {\n                        let reqUrl = this.genURL() + \"XC_FNC=Send2&code=\" + state.val;\n                        reqUrl = encodeURI(reqUrl);\n                        axios\n                            .get(reqUrl)\n                            .then((res) => {\n                                this.log.debug(res.data);\n                                if (this.testResponse(res) === false) {\n                                    this.log.error(\"sendIrData failed\");\n                                }\n                            })\n                            .catch((error) => {\n                                this.log.error(\"mediola device not reached by sending IR data\");\n                                if (error instanceof Error) {\n                                    this.log.error(error.message);\n                                }\n                            });\n                    }\n                } else if (dataName === \"sendRfData\") {\n                    this.log.debug(\"try send: \" + state.val);\n                    if (validMediolaFound) {\n                        let reqUrl = this.genURL() + \"XC_FNC=Send2&ir=00&rf=01&code=\" + state.val;\n                        reqUrl = encodeURI(reqUrl);\n                        axios\n                            .get(reqUrl)\n                            .then((res) => {\n                                this.log.debug(res.data);\n                                if (this.testResponse(res) === false) {\n                                    this.log.error(\"sendRfData failed.\");\n                                }\n                            })\n                            .catch((error) => {\n                                this.log.error(\"mediola device not reached by sending rf data\");\n                                if (error instanceof Error) {\n                                    this.log.error(error.message);\n                                }\n                            });\n                    }\n                } else if (dataName.startsWith(\"id\")) {\n                    if (subfolder === \"sysvars\") {\n                        this.log.debug(\"got known event in sysvars: \" + id + \" \" + JSON.stringify(state));\n                    }\n                    this.log.debug(\"got known event in root: \" + id + \" \" + JSON.stringify(state));\n                } else if (dataName.startsWith(\"WR\")) {\n                    if (subfolder === \"action\") {\n                        const wrId = dataName.replace(\"WR\", \"\");\n                        let direction = \"03\"; // stop\n                        let cmdType = \"01\";\n                        let value = 0;\n                        if (state.val !== null) {\n                            const valueString = state.val.toString(16);\n                            if (valueString.length < 3) {\n                                value = parseInt(String(state.val));\n                            }\n                        }\n                        if (state.val === \"1\") {\n                            direction = \"01\";\n                        } else if (state.val === \"2\") {\n                            direction = \"02\";\n                        } else if (state.val === \"3\") {\n                            direction = \"03\";\n                        } else if (value % 10 === 0 && value < 91 && value > 9) {\n                            // assume percent\n                            cmdType = \"0107\";\n                            direction = value.toString(16);\n                            direction = direction.padStart(2, \"0\");\n                        } else {\n                            this.log.error(\n                                \"only 1 (up), 2 (down) or 3 (stop) is allowed or value from 10 to 90 in 10 steps. For safety do a stop\",\n                            );\n                        }\n                        if (validMediolaFound) {\n                            let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=WR&data=01\" + wrId + cmdType + direction;\n                            reqUrl = encodeURI(reqUrl);\n                            axios\n                                .get(reqUrl)\n                                .then((res) => {\n                                    this.log.debug(res.data);\n                                    if (this.testResponse(res) === false) {\n                                        this.log.error(\"WR data send failed\");\n                                    }\n                                })\n                                .catch((error) => {\n                                    this.log.error(\"mediola device not reached by sending SC data to WR\");\n                                    if (error instanceof Error) {\n                                        this.log.error(error.message);\n                                    }\n                                });\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (dataName.startsWith(\"BK\")) {\n                    if (subfolder === \"action\") {\n                        const actorId = dataName.replace(\"BK\", \"\");\n                        let direction = \"02\"; // stop as default\n                        if (state.val === \"1\") {\n                            direction = \"00\";\n                        } else if (state.val === \"2\") {\n                            direction = \"01\";\n                        } else if (state.val == \"3\") {\n                            direction = \"02\";\n                        } else {\n                            this.log.error(\"only 1 (up), 2 (down) or 3 (stop) is allowed. For safety do a stop\");\n                        }\n                        if (validMediolaFound) {\n                            let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=BK&data=0101\" + actorId + direction;\n                            reqUrl = encodeURI(reqUrl);\n                            axios\n                                .get(reqUrl)\n                                .then((res) => {\n                                    this.log.debug(res.data);\n                                    if (this.testResponse(res) === false) {\n                                        this.log.error(\"BK data send failed\");\n                                    }\n                                })\n                                .catch((error) => {\n                                    this.log.error(\"mediola device not reached by sending SC data to BK\");\n                                    if (error instanceof Error) {\n                                        this.log.error(error.message);\n                                    }\n                                });\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (dataName.startsWith(\"RT\")) {\n                    if (subfolder === \"action\") {\n                        const actorId = dataName.replace(\"RT\", \"\");\n                        let direction = \"10\"; // stop as default\n                        if (state.val === \"1\") {\n                            direction = \"20\";\n                        } else if (state.val === \"2\") {\n                            direction = \"40\";\n                        } else if (state.val == \"3\") {\n                            direction = \"10\";\n                        } else {\n                            this.log.error(\"only 1 (up), 2 (down) or 3 (stop) is allowed. For safety do a stop\");\n                        }\n                        if (validMediolaFound) {\n                            let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=RT&data=\" + direction + actorId;\n                            reqUrl = encodeURI(reqUrl);\n                            axios\n                                .get(reqUrl)\n                                .then((res) => {\n                                    this.log.debug(res.data);\n                                    if (this.testResponse(res) === false) {\n                                        this.log.error(\"RT data send failed\");\n                                    }\n                                })\n                                .catch((error) => {\n                                    this.log.error(\"mediola device not reached by sending SC data to RT\");\n                                    if (error instanceof Error) {\n                                        this.log.error(error.message);\n                                    }\n                                });\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (dataName.startsWith(\"NY\")) {\n                    if (subfolder === \"action\") {\n                        const actorId = dataName.replace(\"NY\", \"\");\n                        if (actorId.length === 8) {\n                            let direction = \"00\"; // stop as default\n                            if (state.val === \"1\") {\n                                direction = \"22\";\n                            } else if (state.val === \"2\") {\n                                direction = \"44\";\n                            } else if (state.val === \"3\") {\n                                direction = \"00\";\n                            } else if (state.val === \"4\") {\n                                direction = \"55\";\n                            } else {\n                                this.log.error(\n                                    \"only 1 (up), 2 (down), 3 (stop) or 4 (stop 55) is allowed. For safety do a stop\",\n                                );\n                            }\n                            if (validMediolaFound) {\n                                let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=NY&data=\" + actorId + direction;\n                                reqUrl = encodeURI(reqUrl);\n                                axios\n                                    .get(reqUrl)\n                                    .then((res) => {\n                                        this.log.debug(res.data);\n                                        if (this.testResponse(res) === false) {\n                                            this.log.error(\"NY data send failed\");\n                                        }\n                                    })\n                                    .catch((error) => {\n                                        this.log.error(\"mediola device not reached by sending SC data to NY\");\n                                        if (error instanceof Error) {\n                                            this.log.error(error.message);\n                                        }\n                                    });\n                            }\n                        } else {\n                            this.log.error(\"NY id is not 8 chars long.\");\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (dataName.startsWith(\"DY\")) {\n                    if (subfolder === \"action\") {\n                        const actorId = dataName.replace(\"DY\", \"\");\n                        if (actorId.length === 8) {\n                            let direction = \"55\"; // stop as default\n                            if (state.val === \"1\") {\n                                direction = \"11\";\n                            } else if (state.val === \"2\") {\n                                direction = \"33\";\n                            } else if (state.val === \"3\") {\n                                direction = \"55\";\n                            } else {\n                                this.log.error(\"only 1 (up), 2 (down) or 3 (stop) is allowed. For safety do a stop\");\n                            }\n                            if (validMediolaFound) {\n                                let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=DY&data=\" + actorId + direction;\n                                reqUrl = encodeURI(reqUrl);\n                                axios\n                                    .get(reqUrl)\n                                    .then((res) => {\n                                        this.log.debug(res.data);\n                                        if (this.testResponse(res) === false) {\n                                            this.log.error(\"DY data send failed\");\n                                        }\n                                    })\n                                    .catch((error) => {\n                                        this.log.error(\"mediola device not reached by sending SC data to DY\");\n                                        if (error instanceof Error) {\n                                            this.log.error(error.message);\n                                        }\n                                    });\n                            }\n                        } else {\n                            this.log.error(\"DY id is not 8 chars long.\");\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (dataName.startsWith(\"2DY\")) {\n                    if (subfolder === \"action\") {\n                        const actorId = dataName.replace(\"2DY\", \"\");\n                        if (actorId.length === 8) {\n                            let direction = \"03\"; // stop as default\n                            let cmdType = \"\";\n                            let value = 0;\n                            if (state.val !== null) {\n                                const valueString = state.val.toString(16);\n                                if (valueString.length < 3) {\n                                    value = parseInt(String(state.val));\n                                }\n                            }\n                            this.log.debug(value.toString());\n                            if (state.val === \"1\") {\n                                direction = \"01\";\n                            } else if (state.val === \"2\") {\n                                direction = \"02\";\n                            } else if (state.val === \"3\") {\n                                direction = \"03\";\n                            } else if (value % 10 === 0 && value < 91 && value > 9) {\n                                // assume percent\n                                cmdType = \"40\";\n                                direction = value.toString(16);\n                                direction = direction.padStart(2, \"0\");\n                            } else {\n                                this.log.error(\n                                    \"only 1 (up), 2 (down) or 3 (stop) is allowed or value from 10 to 90 in 10 steps. For safety do a stop\",\n                                );\n                            }\n                            if (validMediolaFound) {\n                                let reqUrl =\n                                    this.genURL() + \"XC_FNC=SendSC&type=DY2&data=01\" + actorId + cmdType + direction;\n                                reqUrl = encodeURI(reqUrl);\n                                this.log.debug(reqUrl);\n                                axios\n                                    .get(reqUrl)\n                                    .then((res) => {\n                                        this.log.debug(res.data);\n                                        if (this.testResponse(res) === false) {\n                                            this.log.error(\"DY data send failed\");\n                                        }\n                                    })\n                                    .catch((error) => {\n                                        this.log.error(\"mediola device not reached by sending SC data to DY2\");\n                                        if (error instanceof Error) {\n                                            this.log.error(error.message);\n                                        }\n                                    });\n                            }\n                        } else {\n                            this.log.error(\"DY2 id is not 8 chars long.\");\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (dataName.startsWith(\"ER\")) {\n                    if (subfolder === \"action\") {\n                        const actorId = dataName.replace(\"ER\", \"\");\n                        if (actorId.length === 2) {\n                            let direction = \"02\"; // stop as default\n                            if (state.val === \"1\") {\n                                direction = \"01\";\n                            } else if (state.val === \"2\") {\n                                direction = \"00\";\n                            } else if (state.val === \"3\") {\n                                direction = \"02\";\n                            } else {\n                                this.log.error(\"only 1 (up), 2 (down) or 3 (stop) is allowed. For safety do a stop\");\n                            }\n                            if (validMediolaFound) {\n                                let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=ER&data=\" + actorId + direction;\n                                reqUrl = encodeURI(reqUrl);\n                                axios\n                                    .get(reqUrl)\n                                    .then((res) => {\n                                        this.log.debug(res.data);\n                                        this.log.debug(reqUrl);\n                                        if (this.testResponse(res) === false) {\n                                            this.log.error(\"ER data send failed\");\n                                        }\n                                    })\n                                    .catch((error) => {\n                                        this.log.error(\"mediola device not reached by sending SC data to ER\");\n                                        if (error instanceof Error) {\n                                            this.log.error(error.message);\n                                        }\n                                    });\n                            }\n                        } else {\n                            this.log.error(\"ER id is not 2 chars long.\");\n                        }\n                    } else {\n                        this.log.debug(\"Wrong subfolder: \" + subfolder + \"from device: \" + dataName);\n                    }\n                } else if (subfolder === \"homematic\") {\n                    this.log.debug(\"got hm event: \" + JSON.stringify(state));\n                    if (validMediolaFound) {\n                        let reqUrl = this.genURL() + \"XC_FNC=SendSC&type=HM&address=\" + dataName + \"&data=\" + state.val;\n                        reqUrl = encodeURI(reqUrl);\n                        axios\n                            .get(reqUrl)\n                            .then((res) => {\n                                this.log.debug(res.data);\n                                this.log.debug(JSON.stringify(res.data));\n                                this.log.debug(reqUrl);\n                                if (this.testResponse(res) === false) {\n                                    this.log.error(\"homematic data send failed\");\n                                }\n                            })\n                            .catch((error) => {\n                                this.log.error(\"mediola device not reached by sending HM data\");\n                                if (error instanceof Error) {\n                                    this.log.error(error.message);\n                                }\n                            });\n                    }\n                } else {\n                    this.log.debug(\"got unknown event: \" + JSON.stringify(state));\n                    this.log.debug(\"got unknown name: \" + dataName);\n                }\n            }\n        } else {\n            // The state was deleted\n            this.log.debug(`state ${id} deleted`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MediolaGateway(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MediolaGateway())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
